// @flow
/* eslint-disable no-redeclare */

import type { Node } from 'react';

/**
 * ST: Full store state
 * AC: Store actions
 * SE: Selector output
 * PR: Component props
 * CPR: Container props
 * SAA: Store action API
 */

type SetState<ST> = (partialState: $Shape<ST>) => void;
type GetState<ST> = () => $ReadOnly<ST>;
type StoreUnsubscribe = () => void;

export type RenderPropComponent<ST, AC> = (
  state: ST,
  actions: $Exact<BoundActions<AC>>
) => Node;

export type HookReturnValue<ST, AC> = [ST, $Exact<BoundActions<AC>>];

export type Store<ST, AC> = {|
  key: string[],
  initialState: ST,
  actions: AC,
|};

export type StoreState<ST> = {|
  getState: GetState<ST>,
  setState: SetState<ST>,
  resetState: () => void,
  notify: () => void,
  key: string[],
  subscribe: (
    listener: (state: ST, storeState: StoreState<ST>) => void
  ) => StoreUnsubscribe,
  mutator: SetState<ST>,
|};

type ExtractReturnType = <R>(
  (api: StoreActionApi<any>, containerProps: any) => R
) => R;

export type StoreActionApi<ST> = {|
  setState: SetState<ST>,
  getState: GetState<ST>,
  actions: any, // deprecated
  dispatch: <F>(actionThunk: F) => $Call<ExtractReturnType, F>,
|};

export type Action<ST, CPR = *, AC = *> = (
  {|
    setState: SetState<ST>,
    getState: GetState<ST>,
    actions: BoundActions<AC>,
    dispatch: <F>(actionThunk: F) => *,
  |},
  containerProps: CPR
) => *;

// prettier-ignore
type BoundAction<F, SAA = *, CPR = *> =
  & (<A, B, C, D, E>(a: A, b: B, c: C, d: D, e: E) => $Call<$Call<F, A, B, C, D, E>, SAA, CPR>)
  & (<A, B, C, D>(a: A, b: B, c: C, d: D) => $Call<$Call<F, A, B, C, D>, SAA, CPR>)
  & (<A, B, C>(a: A, b: B, c: C) => $Call<$Call<F, A, B, C>, SAA, CPR>)
  & (<A, B>(a: A, b: B) => $Call<$Call<F, A, B>, SAA, CPR>)
  & (<A>(a: A) => $Call<$Call<F, A>, SAA, CPR>)
  & (() => $Call<$Call<F>, SAA, CPR>);

type MapBoundAction = <F>(F) => BoundAction<F>;

export type BoundActions<AC> = $ObjMap<AC, MapBoundAction>;

export type StoreInstance<ST, AC> = {
  store: StoreState<ST>,
  actions: BoundActions<AC>,
};

declare export class Registry {
  configure: ({
    initialStates?: { [key: string]: Object },
  }) => void;
  stores: Map<string, StoreInstance<any, any>>;
  initStore: <ST, AC>(
    store: Store<ST, AC>,
    key: string
  ) => StoreInstance<ST, AC>;
  getStore: <ST, AC>(
    store: Store<ST, AC>,
    scopeId?: string
  ) => StoreInstance<ST, AC>;
  deleteStore: <ST, AC>(store: Store<ST, AC>, scopeId?: string) => void;
}

declare export var defaultRegistry: Registry;

type MiddlewareResult = any;
export type Middleware = (
  storeState: StoreState<any>
) => (next: (arg: any) => MiddlewareResult) => (arg: any) => MiddlewareResult;

declare export var defaults: {
  devtools: boolean | ((storeState: StoreState<any>) => Object),
  middlewares: Set<Middleware>,
  mutator: <ST>(currentState: ST, setStateArg: any) => ST,
};

declare export function batch(callback: () => any): void;

export type ContainerComponent<PR> = React$ComponentType<{|
  scope?: string,
  isGlobal?: boolean,
  children: Node,
  ...PR,
|}>;

export type SubscriberComponent<ST, AC, PR> = React$ComponentType<{|
  children: RenderPropComponent<ST, AC>,
  ...PR,
|}>;

/**
 * createStore
 */

declare export function createStore<ST: { ... }, AC>({|
  initialState: ST,
  actions: AC,
  name?: string,
|}): Store<ST, AC>;

/**
 * createContainer
 */

declare export function createContainer<ST, AC, CPR>(
  store: Store<ST, AC>,
  options?: {|
    onInit?: () => (api: StoreActionApi<ST>, containerProps: CPR) => any,
    onUpdate?: () => (api: StoreActionApi<ST>, containerProps: CPR) => any,
    onCleanup?: () => (api: StoreActionApi<ST>, containerProps: CPR) => any,
    displayName?: string,
  |}
): ContainerComponent<CPR>;

/**
 * createSubscriber
 */

declare export function createSubscriber<ST, AC>(
  store: Store<ST, AC>,
  options?: {|
    displayName?: string,
  |}
): SubscriberComponent<ST, AC, {||}>;

// Flow does not support null properly to refine override :(
// declare export function createSubscriber<ST, AC>(
//   store: Store<ST, AC>,
//   options: {|
//     selector: null,
//     displayName?: string,
//   |}
// ): SubscriberComponent<undefined, AC, {||}>;

declare export function createSubscriber<ST, AC, SE, PR>(
  store: Store<ST, AC>,
  options: {|
    selector: null | ((state: ST, props: PR) => SE),
    displayName?: string,
  |}
): SubscriberComponent<SE, AC, PR>;

/**
 * createHook
 */
declare export function createHook<ST, AC>(
  store: Store<ST, AC>
): () => HookReturnValue<ST, AC>;

// Flow does not support null properly to refine override :(
// declare export function createHook<ST, AC>(
//   store: Store<ST, AC>,
//   options: {|
//     selector: null,
//   |},
// ): () => HookReturnValue<void, AC>;

declare export function createHook<ST, AC, SE, PR>(
  store: Store<ST, AC>,
  options: {|
    selector: null | ((state: ST, props: PR) => SE),
  |}
): (props?: PR) => HookReturnValue<SE, AC>;
